::::::::::::::
dummest.cpp
::::::::::::::
// dummest.C
//
// Original program:	Jim Heliotis, March 2000
// Updates:
//
//	2000/11/29:	wrc, restructured code
//

// This is an implementation of a class example known as
// "The Dummest Little Computer".  It shows how to use
// some of the features of the "arch" kit.

// The two instructions shown involve the accumulator.
//   op code 0 = clear accumulator
//   op code 1 = add memory to accumulator

#include "includes.h"

int main ( int argc, char *argv[] ) {

	// turn on data flow tracing and memory dump after load

	CPUObject::debug |= CPUObject::trace | CPUObject::memload;

	// make sure we've been given an object file name

	if( argc != 2 ) {
		cerr << "Usage:  " << argv[0] << " object-file-name\n\n";
		exit( 1 );
	}

	cout << hex; // change base for future printing

	try {

		make_connections();

		run_simulation( argv[1] );

	}

	catch( ArchLibError &err ) {

		cout << endl
		     << "Simulation aborted - ArchLib runtime error"
		     << endl
		     << "Cause:  " << err.what() << endl;
		return( 1 );
	
	}

	return( 0 );
}
::::::::::::::
includes.h
::::::::::::::
// includes.h
//
// Original version:	Warren Carithers, Novermber 2000
// Updates:
//
// Master include file for the dummest little computer.

#ifndef _INCLUDES_H
#define _INCLUDES_H

// system include files

#include <cstdlib>
#include <iostream>

// 'arch' library

#include <Clock.h>
#include <Bus.h>
#include <StorageObject.h>
#include <Clearable.h>
#include <Counter.h>
#include <Memory.h>
#include <BusALU.h>

using namespace std;

// program-specific includes

#include "globals.h"
#include "prototypes.h"

#endif
::::::::::::::
globals.h
::::::::::::::
// globals.h
//
// Original version:	Warren Carithers, November 2000
// Updates:
//
//	2001/12/10:	wrc, modified simulation control
//
// Extern declarations of global variables for the dummest little computer.

#ifndef _GLOBALS_H
#define _GLOBALS_H

#include "includes.h"

extern const unsigned int ADDR_BITS; // 12-bit address => 4096 units of memory
extern const unsigned int DATA_BITS; // 15-bit unit size

extern Bus abus; // bus to carry memory addresses
extern Bus dbus; // bus to carry data and instructions

extern StorageObject ir;  // instruction register
extern Counter mdr; 	  // memory data register
extern Clearable ac;      // accumulator
extern Counter pc;        // program counter
extern Memory m;          // primary memory
extern BusALU alu;        // arithmetic logic unit

extern bool done;	  // is the simulation over?

#endif
::::::::::::::
globals.cpp
::::::::::::::
// globals.C
//
// Original program:	Jim Heliotis, March 2000
// Updates:
//
//	2000/11/29:	wrc, restructured code
//	2001/12/10:	wrc, modified simulation control
//
// Global variables for the dummest little computer.

#include "includes.h"

//
// Constants
//

const unsigned int ADDR_BITS( 12 ); // 12-bit address => 4096 units of memory
const unsigned int DATA_BITS( 15 ); // 15-bit unit size

//
// Buses
//

Bus abus( "ADDRBUS", ADDR_BITS ); // bus to carry memory addresses
Bus dbus( "DATABUS", DATA_BITS ); // bus to carry data and instructions

//
// Registers
//

StorageObject ir( "IR", DATA_BITS );        // instruction register
Counter mdr( "MDR", DATA_BITS );      	    // memory data register
Clearable ac( "AC", DATA_BITS );            // accumulator
Counter pc( "PC", ADDR_BITS );              // program counter

// 
// Other components
//

Memory m( "Memory", ADDR_BITS, DATA_BITS ); // primary memory
BusALU alu( "Adder", DATA_BITS );           // arithmetic logic unit

//
// Runtime control variables
//

bool done ( false );		// is the simulation over?
::::::::::::::
make_connections.cpp
::::::::::::::
// make_connections.C
//
// Original program:	Jim Heliotis, March 2000
// Updates:
//
//	2000/11/29:	wrc, restructured code
//
// Component connection function.  At execution time, this will
// connect all the CPU components according to the design of
// the architecture.

#include "includes.h"

void make_connections() {

	m.MAR().connectsTo( abus.OUT() );

	mdr.connectsTo( m.WRITE() );
	mdr.connectsTo( m.READ() );
	mdr.connectsTo( dbus.IN() );
	mdr.connectsTo( dbus.OUT() );
	mdr.connectsTo( alu.OP2() );

	ir.connectsTo( abus.IN() );
	ir.connectsTo( dbus.OUT() );

	ac.connectsTo( dbus.IN() );
	ac.connectsTo( dbus.OUT() );
	ac.connectsTo( alu.OP1() );
	ac.connectsTo( alu.OUT() );

	pc.connectsTo( abus.IN() );
	pc.connectsTo( abus.OUT() );
	pc.connectsTo( m.READ() );

}
::::::::::::::
prototypes.h
::::::::::::::
// prototypes.h
//
// Original version:	Warren Carithers, Novermber 2000
// Updates:
//
//	2001/12/10:	wrc, expanded execute() implementation
//
// Function prototypes for the dummest little computer.

#ifndef _PROTOTYPES_H
#define _PROTOTYPES_H

void clear_ac();
void add_to_ac();
void execute();
void fetch_into( StorageObject &, Bus &, StorageObject & );
void make_connections();
void run_simulation( char * );

#endif
::::::::::::::
execute.cpp
::::::::::::::
// execute.C
//
// Original program:	Jim Heliotis, March 2000
// Updates:
//
//	2000/11/29:	wrc, restructured code
//	2001/12/10:	wrc, split execute() into separate routines
//
// Instruction execution routine for the dummest little computer.

#include "includes.h"

//
// clear_ac() - clear the accumulator
//

void clear_ac() {

	ac.clear();

}

//
// add_to_ac() - add from memory to the accumulator
//

void add_to_ac() {

	// get memory operand using address in IR[11,0]
	fetch_into( ir, abus, mdr );

	// set up the addition
	alu.OP1().pullFrom( ac );
	alu.OP2().pullFrom( mdr );
	ac.latchFrom( alu.OUT() );
	alu.perform( BusALU::op_add );

}

//
// execute() - decode and execute the instruction
//

void execute() {
	long opc;

	// in each case, note that the last set of operations
	// aren't actually performed until we leave the switch
	// statement
	//
	// instr format:  opcode = bits 14:12, address = bits 11:0

	opc = ir( DATA_BITS-1, DATA_BITS-3 );

	switch( opc ) {

		case 0:	clear_ac();  break;

		case 1:	add_to_ac();  break;

		default:
			cout << "Illegal op code " << opc << endl;
			done = true;
	}

	Clock::tick();

}
::::::::::::::
fetch_into.cpp
::::::::::::::
// fetch_into.C
//
// Original program:	Jim Heliotis, March 2000
// Updates:
//
//	2000/11/29:	wrc, restructured code
//
// Move a word from the specified location in memory to the
// indicated destination via a particular bus.

#include "includes.h"

void fetch_into( StorageObject &addr, Bus &bus, StorageObject &dest ) {

	// move address into MAR

	bus.IN().pullFrom( addr );
	m.MAR().latchFrom( bus.OUT() );
	Clock::tick();

	// read word from memory into destination

	m.read();
	dest.latchFrom( m.READ() );

	// Note that we don't ahve to do the clock tick here; we could,
	// instead, just return, and have the next clock tick issued in
	// the program do the read.  This would cause us to do the read
	// operation and the next operation we set up as parallel
	// actions.  This requires that the next tick be done before we
	// try to use the contents of 'dest'.

	Clock::tick();

}
